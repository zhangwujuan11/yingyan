{"ast":null,"code":"import _objectSpread from \"C:/XM/yingyan/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport JSMpeg from '@cycjimmy/jsmpeg-player';\nexport default {\n  mounted: function mounted() {\n    var _this = this;\n\n    if (this.rootTabs) {\n      this.rootTabs.$on('tab-click', function (tab) {\n        try {\n          var _tab$$el;\n\n          // 处理el-tabs切换标签时，el-table右侧可能出现空白的Bug\n          if (!((_tab$$el = tab.$el) !== null && _tab$$el !== void 0 && _tab$$el.contains(_this.$el))) {\n            _this.intoBackground();\n          }\n        } catch (error) {}\n      });\n    }\n\n    window.addEventListener('unload', function () {\n      _this.destroyPlayer();\n    });\n    this.init();\n  },\n  destroyed: function destroyed() {\n    this.destroyPlayer();\n  },\n  data: function data() {\n    return {\n      loading: false,\n      flags: {\n        /**\n         * 是否处于无信号状态\n         * 1.当流中断事件触发后，15秒后还没有收到ws消息\n         * 2.ws关闭事件触发\n         */\n        noSignal: false,\n\n        /** 是否已获取到视频分辨率 */\n        gotResolution: false\n      },\n\n      /** @type {import('@uiot-core/class/jsmpeg/jsmpeg').JSMpegPlayer} */\n      player: null,\n      isPlayerHover: false,\n      canvasMouseMoveTimer: null,\n      isFullscreen: false,\n      lastVolume: 0,\n      playerSettings: {\n        disableGl: false,\n\n        /** canvas旋转角度 */\n        rotationAngle: 0,\n        backgroudPlay: false,\n        autoStretch: true\n      },\n      timers: {\n        noSignal: null\n      }\n    };\n  },\n  computed: computed,\n  watch: {\n    url: function url(nval) {\n      var _this$player;\n\n      // this.rotate(0)\n      // if (this.player) {\n      //   this.player.setUrl(nval)\n      // } else {\n      //   this.initPlayer()\n      // }\n      (_this$player = this.player) === null || _this$player === void 0 ? void 0 : _this$player.destroy();\n\n      if (this.url == null || this.url == '') {\n        this.player = null;\n      } else {\n        this.initPlayer();\n      }\n    },\n    options: {\n      deep: true,\n      handler: function handler() {\n        this.destroyPlayer();\n        this.initPlayer();\n      }\n    },\n    inBackground: function inBackground(nval) {\n      if (nval) {\n        this.intoBackground();\n      } else {\n        this.intoFront();\n      }\n    }\n  },\n  methods: {\n    init: function init() {\n      this.initPlayer();\n    },\n    initPlayer: function initPlayer() {\n      var _this2 = this;\n\n      if (!this.url) return;\n      this.loading = true;\n      this.player = new JSMpeg.Player(this.url, _objectSpread(_objectSpread({\n        contianer: this.$refs['canvas-wrap']\n      }, this.options), {}, {\n        onVideoDecode: function onVideoDecode(decoder, time) {\n          _this2.$emit('video-decode', decoder, time);\n        },\n        onAudioDecode: function onAudioDecode(decoder, time) {\n          _this2.$emit('audio-decode', decoder, time);\n        },\n        onPlay: function onPlay(player) {\n          _this2.loading = false;\n          console.log('onPlay');\n\n          _this2.$emit('play', player);\n        },\n        onPause: function onPause(player) {\n          _this2.loading = false;\n          console.log('onPause');\n\n          _this2.$emit('pause', player);\n        },\n        onEnded: function onEnded(player) {\n          console.log('onEnded');\n\n          _this2.$emit('ended', player);\n        },\n        onStalled: function onStalled(player) {\n          console.log('onStalled');\n\n          _this2.$emit('stalled', player);\n        },\n        onSourceEstablished: function onSourceEstablished(source) {\n          console.log('onSourceEstablished');\n          _this2.flags.noSignal = false;\n          _this2.loading = false;\n          clearTimeout(_this2.timers.noSignal);\n          _this2.timers.noSignal = null;\n\n          _this2.$emit('source-established', source);\n        },\n        onSourceCompleted: function onSourceCompleted(source) {\n          console.log('onSourceCompleted');\n\n          _this2.$emit('source-completed', source);\n        },\n        onSourceConnected: function onSourceConnected() {\n          console.log('onSourceConnected');\n          clearTimeout(_this2.timers.noSignal);\n          _this2.loading = true;\n          _this2.flags.noSignal = false;\n\n          _this2.$emit('source-connected');\n        },\n        onSourceStreamInterrupt: function onSourceStreamInterrupt() {\n          console.log('onSourceStreamInterrupt');\n          _this2.loading = true;\n          clearTimeout(_this2.timers.noSignal);\n          _this2.timers.noSignal = setTimeout(_this2.handleNoSignal, 15000);\n\n          _this2.$emit('source-interrupt');\n        },\n        onSourceStreamContinue: function onSourceStreamContinue() {\n          console.log('onSourceStreamContinue');\n          clearTimeout(_this2.timers.noSignal);\n          _this2.timers.noSignal = null;\n          _this2.loading = false;\n          _this2.flags.noSignal = false;\n\n          _this2.$emit('source-continue');\n        },\n        onSourceClosed: function onSourceClosed() {\n          console.log('onSourceClosed');\n          clearTimeout(_this2.timers.noSignal);\n\n          _this2.$emit('source-closed');\n\n          _this2.handleNoSignal();\n        },\n        onResolutionDecode: function onResolutionDecode() {\n          // 从流中获取到视频的分辨率\n          _this2.flags.gotResolution = true;\n\n          _this2.settingPlayer('autoStretch', _this2.playerSettings.autoStretch);\n\n          _this2.$emit('resolution-decode');\n        }\n      }));\n      this.playerSettings.backgroudPlay = !this.options.pauseWhenHidden;\n\n      if (this.defaultMute) {\n        this.volume = 0;\n      }\n\n      this.timers.noSignal = setTimeout(this.handleNoSignal, 15000);\n\n      for (var key in this.playerSettings) {\n        this.settingPlayer(key, this.playerSettings[key]);\n      }\n\n      console.log('player', this.player);\n    },\n    rotate: function rotate(angle) {\n      var append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.player.rotate(angle, append);\n    },\n\n    /**\n     * 进入画中画模式\n     * @deprecated 未实现\n     */\n    requesPip: function requesPip() {// if (!document.pictureInPictureElement) {\n      //   this.$refs.canvas.requestPictureInPicture()\n      // }\n    },\n\n    /**\n     * 退出画中画模式\n     * @deprecated 未实现\n     */\n    exitPip: function exitPip() {// document.exitPictureInPicture()\n    },\n\n    /**\n     * 切换全屏模式\n     */\n    toggleFullscreen: function toggleFullscreen() {\n      var _this3 = this;\n\n      if (this.isFullscreen) {\n        fullscreen.exit(this.$el);\n      } else {\n        fullscreen.request(this.$el, function () {\n          _this3.isFullscreen = false;\n        });\n      }\n\n      this.isFullscreen = !this.isFullscreen;\n    },\n    play: function play() {\n      var _this$player2;\n\n      if (!this.url) return;\n      this.loading = true;\n\n      if (!this.player) {\n        this.initPlayer();\n      }\n\n      (_this$player2 = this.player) === null || _this$player2 === void 0 ? void 0 : _this$player2.play();\n    },\n\n    /**\n     * 切换播放模式\n     */\n    togglePlay: function togglePlay() {\n      if (this.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    },\n    pause: function pause() {\n      var _this$player3;\n\n      (_this$player3 = this.player) === null || _this$player3 === void 0 ? void 0 : _this$player3.pause();\n    },\n    intoFront: function intoFront() {\n      var _this$player4;\n\n      (_this$player4 = this.player) === null || _this$player4 === void 0 ? void 0 : _this$player4.intoFront();\n    },\n    intoBackground: function intoBackground() {\n      var _this$player5;\n\n      (_this$player5 = this.player) === null || _this$player5 === void 0 ? void 0 : _this$player5.intoBackground();\n    },\n    stop: function stop(clear) {\n      var _this$player6;\n\n      (_this$player6 = this.player) === null || _this$player6 === void 0 ? void 0 : _this$player6.stop(clear);\n    },\n    nextFrame: function nextFrame() {\n      var _this$player7;\n\n      (_this$player7 = this.player) === null || _this$player7 === void 0 ? void 0 : _this$player7.nextFrame();\n    },\n    destroyPlayer: function destroyPlayer() {\n      var _this$player8;\n\n      this.stop();\n      (_this$player8 = this.player) === null || _this$player8 === void 0 ? void 0 : _this$player8.destroy();\n      this.player = null;\n    },\n    mute: function mute() {\n      this.lastVolume = this.volume;\n      this.volume = 0;\n    },\n    toggleMute: function toggleMute() {\n      if (this.isMuted) {\n        this.volume = this.lastVolume ? this.lastVolume : 1;\n      } else {\n        this.mute();\n      }\n\n      this.$emit('volume-change', this.volume);\n    },\n\n    /** 截图 */\n    snapshot: function snapshot() {\n      var _this$player9;\n\n      (_this$player9 = this.player) === null || _this$player9 === void 0 ? void 0 : _this$player9.snapshot(this.title);\n    },\n    recording: function recording() {\n      var _this$player10;\n\n      (_this$player10 = this.player) === null || _this$player10 === void 0 ? void 0 : _this$player10.recording(this.title);\n    },\n\n    /**\n     * @param\n     */\n    settingPlayer: function settingPlayer(optionName, value) {\n      var _this$player11;\n\n      if (!this.player) return;\n\n      switch (optionName) {\n        case 'autoStretch':\n          if (!this.flags.gotResolution) return;\n          var canvas = this.player.canvas;\n\n          if (value) {\n            if (canvas.width > canvas.height) {\n              canvas.style.width = '100%';\n            } else {\n              canvas.style.height = '100%';\n            }\n          } else {\n            canvas.style.width = '';\n            canvas.style.height = '';\n          }\n\n          break;\n\n        default:\n          (_this$player11 = this.player) === null || _this$player11 === void 0 ? void 0 : _this$player11.setOption(optionName, value);\n          break;\n      }\n    },\n    handleToolbarBtnClick: function handleToolbarBtnClick(cmd) {\n      if (!this.player) return;\n\n      switch (cmd) {\n        case 'play':\n          this.togglePlay();\n          break;\n\n        case 'stop':\n          this.stop();\n          break;\n\n        case 'mute':\n          this.toggleMute();\n          break;\n\n        case 'snapshot':\n          this.snapshot();\n          break;\n\n        case 'recording':\n          this.recording();\n          break;\n\n        case 'fullscreen':\n          this.toggleFullscreen();\n          break;\n      }\n    },\n    handleNoSignal: function handleNoSignal() {\n      this.flags.noSignal = true;\n      this.loading = false;\n      this.stop();\n      this.$emit('no-signal');\n    },\n    handlePlayerMouseEnter: function handlePlayerMouseEnter() {\n      this.isPlayerHover = true;\n    },\n    handleCanvasMouseMove: function handleCanvasMouseMove() {\n      var _this4 = this;\n\n      this.isPlayerHover = true;\n      clearTimeout(this.canvasMouseMoveTimer);\n      this.canvasMouseMoveTimer = setTimeout(function () {\n        _this4.isPlayerHover = false;\n      }, 3000);\n    },\n    handlePlayerMouseLeave: function handlePlayerMouseLeave() {\n      clearTimeout(this.canvasMouseMoveTimer);\n      this.isPlayerHover = false;\n    },\n    handleCanvasClick: function handleCanvasClick() {},\n    handleToolbarMouseEnter: function handleToolbarMouseEnter() {\n      this.isPlayerHover = true;\n      clearTimeout(this.canvasMouseMoveTimer);\n    },\n    handleToolbarMouseLeave: function handleToolbarMouseLeave() {}\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqLA;AAGA;EAGAA,OAHA,qBAGA;IAAA;;IACA;MACA;QACA;UAAA;;UACA;UACA;YACA;UACA;QACA,CALA,CAKA;MACA,CAPA;IAQA;;IACAC;MACA;IACA,CAFA;IAGA;EACA,CAlBA;EAmBAC,SAnBA,uBAmBA;IACA;EACA,CArBA;EAsBAC,IAtBA,kBAsBA;IACA;MACAC,cADA;MAEAC;QACA;AACA;AACA;AACA;AACA;QACAC,eANA;;QAOA;QACAC;MARA,CAFA;;MAYA;MACAC,YAbA;MAcAC,oBAdA;MAeAC,0BAfA;MAgBAC,mBAhBA;MAiBAC,aAjBA;MAkBAC;QACAC,gBADA;;QAEA;QACAC,gBAHA;QAIAC,oBAJA;QAKAC;MALA,CAlBA;MAyBAC;QACAZ;MADA;IAzBA;EA6BA,CApDA;EAqDAa,kBArDA;EAsDAC;IACAC,GADA,eACAC,IADA,EACA;MAAA;;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAdA;IAeAC;MACAC,UADA;MAEAC,OAFA,qBAEA;QACA;QACA;MACA;IALA,CAfA;IAsBAC,YAtBA,wBAsBAJ,IAtBA,EAsBA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA;EA5BA,CAtDA;EAoFAK;IACAC,IADA,kBACA;MACA;IACA,CAHA;IAIAC,UAJA,wBAIA;MAAA;;MACA;MAEA;MACA;QACAC;MADA,GAEA,YAFA;QAGAC;UACA;QACA,CALA;QAMAC;UACA;QACA,CARA;QASAC;UACA;UACAC;;UACA;QACA,CAbA;QAcAC;UACA;UACAD;;UACA;QACA,CAlBA;QAmBAE;UACAF;;UACA;QACA,CAtBA;QAuBAG;UACAH;;UACA;QACA,CA1BA;QA2BAI;UACAJ;UAEA;UACA;UACAK;UACA;;UAEA;QACA,CApCA;QAqCAC;UACAN;;UACA;QACA,CAxCA;QAyCAO;UACAP;UACAK;UACA;UACA;;UACA;QACA,CA/CA;QAgDAG;UACAR;UACA;UACAK;UAEA;;UACA;QACA,CAvDA;QAwDAI;UACAT;UACAK;UACA;UACA;UACA;;UACA;QACA,CA/DA;QAgEAK;UACAV;UACAK;;UACA;;UACA;QACA,CArEA;QAsEAM;UACA;UACA;;UACA;;UACA;QACA;MA3EA;MA6EA;;MAEA;QACA;MACA;;MACA;;MACA;QACA;MACA;;MACAX;IACA,CA/FA;IAgGAY,MAhGA,kBAgGAC,KAhGA,EAgGA;MAAA;MACA;IACA,CAlGA;;IAmGA;AACA;AACA;AACA;IACAC,SAvGA,uBAuGA,CACA;MACA;MACA;IACA,CA3GA;;IA4GA;AACA;AACA;AACA;IACAC,OAhHA,qBAgHA,CACA;IACA,CAlHA;;IAmHA;AACA;AACA;IACAC,gBAtHA,8BAsHA;MAAA;;MACA;QACAC;MACA,CAFA,MAEA;QACAA;UACA;QACA,CAFA;MAGA;;MACA;IACA,CA/HA;IAgIAC,IAhIA,kBAgIA;MAAA;;MACA;MAEA;;MACA;QACA;MACA;;MACA;IACA,CAxIA;;IAyIA;AACA;AACA;IACAC,UA5IA,wBA4IA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAlJA;IAmJAC,KAnJA,mBAmJA;MAAA;;MACA;IACA,CArJA;IAsJAC,SAtJA,uBAsJA;MAAA;;MACA;IACA,CAxJA;IAyJAC,cAzJA,4BAyJA;MAAA;;MACA;IACA,CA3JA;IA4JAC,IA5JA,gBA4JAC,KA5JA,EA4JA;MAAA;;MACA;IACA,CA9JA;IA+JAC,SA/JA,uBA+JA;MAAA;;MACA;IACA,CAjKA;IAkKAC,aAlKA,2BAkKA;MAAA;;MACA;MACA;MACA;IACA,CAtKA;IAuKAC,IAvKA,kBAuKA;MACA;MACA;IACA,CA1KA;IA2KAC,UA3KA,wBA2KA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;;MACA;IACA,CAlLA;;IAmLA;IACAC,QApLA,sBAoLA;MAAA;;MACA;IACA,CAtLA;IAuLAC,SAvLA,uBAuLA;MAAA;;MACA;IACA,CAzLA;;IA2LA;AACA;AACA;IACAC,aA9LA,yBA8LAC,UA9LA,EA8LAC,KA9LA,EA8LA;MAAA;;MACA;;MACA;QACA;UACA;UAEA;;UACA;YACA;cACAC;YACA,CAFA,MAEA;cACAA;YACA;UACA,CANA,MAMA;YACAA;YACAA;UACA;;UAEA;;QACA;UACA;UACA;MAnBA;IAqBA,CArNA;IAsNAC,qBAtNA,iCAsNAC,GAtNA,EAsNA;MACA;;MACA;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;MAlBA;IAoBA,CA5OA;IA6OAC,cA7OA,4BA6OA;MACA;MACA;MACA;MACA;IACA,CAlPA;IAmPAC,sBAnPA,oCAmPA;MACA;IACA,CArPA;IAsPAC,qBAtPA,mCAsPA;MAAA;;MACA;MACAlC;MACA;QACA;MACA,CAFA,EAEA,IAFA;IAGA,CA5PA;IA6PAmC,sBA7PA,oCA6PA;MACAnC;MACA;IACA,CAhQA;IAiQAoC,iBAjQA,+BAiQA,EAjQA;IAkQAC,uBAlQA,qCAkQA;MACA;MACArC;IACA,CArQA;IAsQAsC,uBAtQA,qCAsQA;EAtQA;AApFA","names":["mounted","window","destroyed","data","loading","flags","noSignal","gotResolution","player","isPlayerHover","canvasMouseMoveTimer","isFullscreen","lastVolume","playerSettings","disableGl","rotationAngle","backgroudPlay","autoStretch","timers","computed","watch","url","nval","options","deep","handler","inBackground","methods","init","initPlayer","contianer","onVideoDecode","onAudioDecode","onPlay","console","onPause","onEnded","onStalled","onSourceEstablished","clearTimeout","onSourceCompleted","onSourceConnected","onSourceStreamInterrupt","onSourceStreamContinue","onSourceClosed","onResolutionDecode","rotate","angle","requesPip","exitPip","toggleFullscreen","fullscreen","play","togglePlay","pause","intoFront","intoBackground","stop","clear","nextFrame","destroyPlayer","mute","toggleMute","snapshot","recording","settingPlayer","optionName","value","canvas","handleToolbarBtnClick","cmd","handleNoSignal","handlePlayerMouseEnter","handleCanvasMouseMove","handlePlayerMouseLeave","handleCanvasClick","handleToolbarMouseEnter","handleToolbarMouseLeave"],"sourceRoot":"src/views","sources":["Unnormal.vue"],"sourcesContent":["<template>\n  <div class=\"jsmpeg-player\"\n       @mouseenter=\"handlePlayerMouseEnter\"\n       @mouseleave=\"handlePlayerMouseLeave\">\n    <div class=\"jsmpeg-header\"\n         :class=\"{'is-show':showTitle}\">\n      <slot v-if=\"$slots.title\"\n            name=\"title\" />\n      <span v-else-if=\"title\"\n            class=\"jsmpeg-title\">\n        {{title}}\n      </span>\n      <div class=\"recording-title\"\n           v-if=\"isRecording\">\n        <template v-if=\"showTitle\">\n          <div class=\"icon\" />REC {{recordingDurationLabel}}\n        </template>\n        <template v-else>\n          <div class=\"icon\"\n               :class=\"recordingDuration%2==0?'is-hide':''\" />REC\n        </template>\n      </div>\n      <button v-if=\"showCloseBtn\"\n              class=\"close-btn el-icon-close\"\n              title=\"关闭\"\n              @click=\"$emit('close')\">\n      </button>\n    </div>\n    <div class=\"jsmpeg-canvas__wrap\"\n         ref=\"canvas-wrap\"\n         v-loading=\"loading\"\n         element-loading-text=\"拼命加载中...\"\n         @mousemove.passive=\"handleCanvasMouseMove\"\n         @click=\"handleCanvasClick\"\n         @dblclick=\"toggleFullscreen\">\n      <!-- <canvas class=\"jsmpeg-canvas\"\n              ref=\"canvas\" /> -->\n      <template v-if=\"!loading&&flags.noSignal\">\n        <div v-if=\"!$slots['no-signal']\"\n             class=\"no-signal-text\">\n          无信号\n        </div>\n        <slot name=\"no-signal\"></slot>\n      </template>\n    </div>\n    <div class=\"jsmpeg-toolbar\"\n         v-if=\"withToolbar\"\n         :class=\"{'is-show':player&&isPlayerHover}\"\n         @mouseenter=\"handleToolbarMouseEnter\"\n         @mouseleave=\"handleToolbarMouseLeave\">\n      <button class=\"toolbar-btn play-btn\"\n              :class=\"paused?'el-icon-video-play paused':'el-icon-video-pause'\"\n              :title=\"paused?'播放':'暂停'\"\n              @click=\"handleToolbarBtnClick('play')\">\n      </button>\n      <button class=\"toolbar-btn stop-btn ut-icon-stop\"\n              title=\"停止\"\n              @click=\"handleToolbarBtnClick('stop')\">\n      </button>\n      <button class=\"toolbar-btn volume-btn\"\n              :class=\"isMuted?'ut-icon-muted':'ut-icon-volume'\"\n              title=\"音量\"\n              v-popover:popover-volume\n              @click=\"handleToolbarBtnClick('mute')\">\n      </button>\n      <div class=\"progress-bar\">\n        <span v-if=\"showDuration\"\n              class=\"current-time\">\n          {{currentTimeLabel}}\n        </span>\n      </div>\n      <!-- <button class=\"snapshot-btn\"\n              title=\"画中画\"\n              @click=\"requesPip\">\n        <i class=\"el-icon-copy-document\"></i>\n      </button> -->\n      <button class=\"toolbar-btn snapshot-btn el-icon-camera\"\n              title=\"截图\"\n              @click=\"handleToolbarBtnClick('snapshot')\">\n      </button>\n      <button class=\"toolbar-btn recording-btn ut-icon-recording\"\n              :class=\"isRecording?'is-recording':''\"\n              :title=\"isRecording?'停止录制':'录制'\"\n              @click=\"handleToolbarBtnClick('recording')\">\n      </button>\n      <button class=\"toolbar-btn setting-btn el-icon-setting\"\n              title=\"设置\"\n              v-popover:popover-setting>\n      </button>\n      <button class=\"toolbar-btn fullscreen-btn\"\n              :class=\"isFullscreen?'ut-icon-exitfullscreen':'ut-icon-fullscreen'\"\n              :title=\"isFullscreen?'取消全屏':'全屏'\"\n              @click=\"handleToolbarBtnClick('fullscreen')\">\n      </button>\n    </div>\n    <div class=\"overlayers\">\n      <template v-if=\"withToolbar\">\n        <el-popover popper-class=\"jsmpeg-popover popover-setting\"\n                    ref=\"popover-setting\"\n                    trigger=\"hover\"\n                    placement=\"top-end\"\n                    :visible-arrow=\"popoverVisibleArrow\"\n                    :append-to-body=\"false\">\n          <!-- <div class=\"setting-item\">\n            <span class=\"label\">禁用WebGL</span>\n            <div class=\"input__wrap\">\n              <el-switch class=\"input\"\n                         v-model=\"playerSettings.disableGl\">\n              </el-switch>\n            </div>\n          </div> -->\n          <!-- <div class=\"setting-item\"\n               highlight>\n            <span class=\"label\">后台播放</span>\n            <div class=\"input__wrap\">\n              <el-switch class=\"input\"\n                         v-model=\"playerSettings.backgroudPlay\"\n                         @change=\"settingPlayer('pauseWhenHidden',!$event)\">\n              </el-switch>\n            </div>\n          </div> -->\n          <div class=\"setting-item\"\n               highlight>\n            <span class=\"label\">自动拉伸</span>\n            <div class=\"input__wrap\">\n              <el-switch class=\"input\"\n                         v-model=\"playerSettings.autoStretch\"\n                         @change=\"settingPlayer('autoStretch',$event)\">\n              </el-switch>\n            </div>\n          </div>\n          <div class=\"setting-item\"\n               highlight>\n            <span class=\"label\">旋转画面</span>\n            <div class=\"input__wrap\">\n              <button class=\"toolbar-btn ut-icon-rotate-left-90\"\n                      title=\"向左旋转90度\"\n                      @click=\"rotate(-90,true)\"></button>\n              <button class=\"toolbar-btn ut-icon-rotate-right-90\"\n                      title=\"向右旋转90度\"\n                      @click=\"rotate(90,true)\"></button>\n            </div>\n          </div>\n          <!-- <div class=\"setting-item\">\n          <span class=\"label\">test</span>\n          <div class=\"input__wrap\">\n            <el-button class=\"input\"\n                       @click=\"player.stop(true)\">\n            </el-button>\n          </div>\n        </div> -->\n        </el-popover>\n        <el-popover popper-class=\"jsmpeg-popover popover-volume\"\n                    ref=\"popover-volume\"\n                    trigger=\"hover\"\n                    placement=\"top\"\n                    :visible-arrow=\"popoverVisibleArrow\"\n                    :append-to-body=\"false\">\n          <div class=\"volume-value\">{{volumePercent}}</div>\n          <el-slider v-model=\"volume\"\n                     vertical\n                     height=\"120px\"\n                     :max=\"1\"\n                     :min=\"0\"\n                     :step=\"0.01\"\n                     :show-tooltip=\"false\"\n                     :marks=\"{\n                       0 : '',\n                       0.5 : '',\n                       1 : '',\n                     }\"\n                     @change=\"$emit('volume-change', volume)\">\n          </el-slider>\n        </el-popover>\n      </template>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport JSMpeg from '@cycjimmy/jsmpeg-player'\n\n\nexport default {\n \n \n  mounted() {\n    if (this.rootTabs) {\n      this.rootTabs.$on('tab-click', (tab) => {\n        try {\n          // 处理el-tabs切换标签时，el-table右侧可能出现空白的Bug\n          if (!tab.$el?.contains(this.$el)) {\n            this.intoBackground()\n          }\n        } catch (error) {}\n      })\n    }\n    window.addEventListener('unload', () => {\n      this.destroyPlayer()\n    })\n    this.init()\n  },\n  destroyed() {\n    this.destroyPlayer()\n  },\n  data() {\n    return {\n      loading: false,\n      flags: {\n        /**\n         * 是否处于无信号状态\n         * 1.当流中断事件触发后，15秒后还没有收到ws消息\n         * 2.ws关闭事件触发\n         */\n        noSignal: false,\n        /** 是否已获取到视频分辨率 */\n        gotResolution: false\n      },\n      /** @type {import('@uiot-core/class/jsmpeg/jsmpeg').JSMpegPlayer} */\n      player: null,\n      isPlayerHover: false,\n      canvasMouseMoveTimer: null,\n      isFullscreen: false,\n      lastVolume: 0,\n      playerSettings: {\n        disableGl: false,\n        /** canvas旋转角度 */\n        rotationAngle: 0,\n        backgroudPlay: false,\n        autoStretch: true\n      },\n      timers: {\n        noSignal: null\n      }\n    }\n  },\n  computed: computed,\n  watch: {\n    url(nval) {\n      // this.rotate(0)\n      // if (this.player) {\n      //   this.player.setUrl(nval)\n      // } else {\n      //   this.initPlayer()\n      // }\n      this.player?.destroy()\n      if (this.url == null || this.url == '') {\n        this.player = null\n      } else {\n        this.initPlayer()\n      }\n    },\n    options: {\n      deep: true,\n      handler() {\n        this.destroyPlayer()\n        this.initPlayer()\n      }\n    },\n    inBackground(nval) {\n      if (nval) {\n        this.intoBackground()\n      } else {\n        this.intoFront()\n      }\n    }\n  },\n  methods: {\n    init() {\n      this.initPlayer()\n    },\n    initPlayer() {\n      if (!this.url) return\n\n      this.loading = true\n      this.player = new JSMpeg.Player(this.url, {\n        contianer: this.$refs['canvas-wrap'],\n        ...this.options,\n        onVideoDecode: (decoder, time) => {\n          this.$emit('video-decode', decoder, time)\n        },\n        onAudioDecode: (decoder, time) => {\n          this.$emit('audio-decode', decoder, time)\n        },\n        onPlay: (player) => {\n          this.loading = false\n          console.log('onPlay')\n          this.$emit('play', player)\n        },\n        onPause: (player) => {\n          this.loading = false\n          console.log('onPause')\n          this.$emit('pause', player)\n        },\n        onEnded: (player) => {\n          console.log('onEnded')\n          this.$emit('ended', player)\n        },\n        onStalled: (player) => {\n          console.log('onStalled')\n          this.$emit('stalled', player)\n        },\n        onSourceEstablished: (source) => {\n          console.log('onSourceEstablished')\n\n          this.flags.noSignal = false\n          this.loading = false\n          clearTimeout(this.timers.noSignal)\n          this.timers.noSignal = null\n\n          this.$emit('source-established', source)\n        },\n        onSourceCompleted: (source) => {\n          console.log('onSourceCompleted')\n          this.$emit('source-completed', source)\n        },\n        onSourceConnected: () => {\n          console.log('onSourceConnected')\n          clearTimeout(this.timers.noSignal)\n          this.loading = true\n          this.flags.noSignal = false\n          this.$emit('source-connected')\n        },\n        onSourceStreamInterrupt: () => {\n          console.log('onSourceStreamInterrupt')\n          this.loading = true\n          clearTimeout(this.timers.noSignal)\n\n          this.timers.noSignal = setTimeout(this.handleNoSignal, 15000)\n          this.$emit('source-interrupt')\n        },\n        onSourceStreamContinue: () => {\n          console.log('onSourceStreamContinue')\n          clearTimeout(this.timers.noSignal)\n          this.timers.noSignal = null\n          this.loading = false\n          this.flags.noSignal = false\n          this.$emit('source-continue')\n        },\n        onSourceClosed: () => {\n          console.log('onSourceClosed')\n          clearTimeout(this.timers.noSignal)\n          this.$emit('source-closed')\n          this.handleNoSignal()\n        },\n        onResolutionDecode: () => {\n          // 从流中获取到视频的分辨率\n          this.flags.gotResolution = true\n          this.settingPlayer('autoStretch', this.playerSettings.autoStretch)\n          this.$emit('resolution-decode')\n        }\n      })\n      this.playerSettings.backgroudPlay = !this.options.pauseWhenHidden\n\n      if (this.defaultMute) {\n        this.volume = 0\n      }\n      this.timers.noSignal = setTimeout(this.handleNoSignal, 15000)\n      for (const key in this.playerSettings) {\n        this.settingPlayer(key, this.playerSettings[key])\n      }\n      console.log('player', this.player)\n    },\n    rotate(angle, append = false) {\n      this.player.rotate(angle, append)\n    },\n    /**\n     * 进入画中画模式\n     * @deprecated 未实现\n     */\n    requesPip() {\n      // if (!document.pictureInPictureElement) {\n      //   this.$refs.canvas.requestPictureInPicture()\n      // }\n    },\n    /**\n     * 退出画中画模式\n     * @deprecated 未实现\n     */\n    exitPip() {\n      // document.exitPictureInPicture()\n    },\n    /**\n     * 切换全屏模式\n     */\n    toggleFullscreen() {\n      if (this.isFullscreen) {\n        fullscreen.exit(this.$el)\n      } else {\n        fullscreen.request(this.$el, () => {\n          this.isFullscreen = false\n        })\n      }\n      this.isFullscreen = !this.isFullscreen\n    },\n    play() {\n      if (!this.url) return\n\n      this.loading = true\n      if (!this.player) {\n        this.initPlayer()\n      }\n      this.player?.play()\n    },\n    /**\n     * 切换播放模式\n     */\n    togglePlay() {\n      if (this.paused) {\n        this.play()\n      } else {\n        this.pause()\n      }\n    },\n    pause() {\n      this.player?.pause()\n    },\n    intoFront() {\n      this.player?.intoFront()\n    },\n    intoBackground() {\n      this.player?.intoBackground()\n    },\n    stop(clear) {\n      this.player?.stop(clear)\n    },\n    nextFrame() {\n      this.player?.nextFrame()\n    },\n    destroyPlayer() {\n      this.stop()\n      this.player?.destroy()\n      this.player = null\n    },\n    mute() {\n      this.lastVolume = this.volume\n      this.volume = 0\n    },\n    toggleMute() {\n      if (this.isMuted) {\n        this.volume = this.lastVolume ? this.lastVolume : 1\n      } else {\n        this.mute()\n      }\n      this.$emit('volume-change', this.volume)\n    },\n    /** 截图 */\n    snapshot() {\n      this.player?.snapshot(this.title)\n    },\n    recording() {\n      this.player?.recording(this.title)\n    },\n\n    /**\n     * @param\n     */\n    settingPlayer(optionName, value) {\n      if (!this.player) return\n      switch (optionName) {\n        case 'autoStretch':\n          if (!this.flags.gotResolution) return\n\n          const canvas = this.player.canvas\n          if (value) {\n            if (canvas.width > canvas.height) {\n              canvas.style.width = '100%'\n            } else {\n              canvas.style.height = '100%'\n            }\n          } else {\n            canvas.style.width = ''\n            canvas.style.height = ''\n          }\n\n          break\n        default:\n          this.player?.setOption(optionName, value)\n          break\n      }\n    },\n    handleToolbarBtnClick(cmd) {\n      if (!this.player) return\n      switch (cmd) {\n        case 'play':\n          this.togglePlay()\n          break\n        case 'stop':\n          this.stop()\n          break\n        case 'mute':\n          this.toggleMute()\n          break\n        case 'snapshot':\n          this.snapshot()\n          break\n        case 'recording':\n          this.recording()\n          break\n        case 'fullscreen':\n          this.toggleFullscreen()\n          break\n      }\n    },\n    handleNoSignal() {\n      this.flags.noSignal = true\n      this.loading = false\n      this.stop()\n      this.$emit('no-signal')\n    },\n    handlePlayerMouseEnter() {\n      this.isPlayerHover = true\n    },\n    handleCanvasMouseMove() {\n      this.isPlayerHover = true\n      clearTimeout(this.canvasMouseMoveTimer)\n      this.canvasMouseMoveTimer = setTimeout(() => {\n        this.isPlayerHover = false\n      }, 3000)\n    },\n    handlePlayerMouseLeave() {\n      clearTimeout(this.canvasMouseMoveTimer)\n      this.isPlayerHover = false\n    },\n    handleCanvasClick() {},\n    handleToolbarMouseEnter() {\n      this.isPlayerHover = true\n      clearTimeout(this.canvasMouseMoveTimer)\n    },\n    handleToolbarMouseLeave() {}\n  }\n}\n</script>\n\n<style lang='scss'>\n$back-color: rgba(\n  $color: dimgray,\n  $alpha: 0.8\n);\n.jsmpeg-player {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  background-color: #000;\n  button {\n    background: none;\n    border: none;\n    display: flex;\n    font-size: inherit;\n    line-height: inherit;\n    text-transform: none;\n    text-decoration: none;\n    cursor: pointer;\n    overflow: hidden;\n  }\n  .jsmpeg-header {\n    width: 100%;\n    height: 40px;\n    line-height: 40px;\n    position: absolute;\n    top: 0;\n    left: 0;\n    padding: 0 10px;\n    background: linear-gradient(#000, transparent);\n    transform: translateY(-100%);\n    transition: 0.48s transform ease-in-out;\n    z-index: 10;\n    &.is-show {\n      transform: translateY(0);\n      .recording-title {\n        display: inline-flex;\n        // transition: 0.45s display;\n      }\n    }\n    .jsmpeg-title {\n      color: #fff;\n    }\n    .recording-title {\n      height: 40px;\n      display: flex;\n      font-size: 14px;\n      color: white;\n      flex-direction: row;\n      justify-content: flex-end;\n      align-items: center;\n      .icon {\n        width: 10px;\n        height: 10px;\n        background-color: red;\n        border-radius: 5px;\n        margin-left: 8px;\n        margin-right: 6px;\n        transition: 0.25s background-color ease-in;\n        &.is-hide {\n          background-color: transparent;\n        }\n      }\n    }\n    .close-btn {\n      color: gray;\n      transition: 0.28s color;\n      position: absolute;\n      top: 0;\n      right: 5px;\n      font-size: 18px;\n      &:hover {\n        color: #f56c6c;\n      }\n    }\n  }\n  .jsmpeg-canvas__wrap {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1;\n    canvas {\n      max-width: 100%;\n      max-height: 100%;\n      // transition: 0.28s transform;\n    }\n    .no-signal-text {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: white;\n      position: absolute;\n      top: 0;\n      left: 0;\n      background-color: #000;\n    }\n    .el-loading-mask {\n      background-color: transparent;\n    }\n  }\n  .jsmpeg-toolbar {\n    width: 100%;\n    height: 45px;\n    line-height: 36px;\n    background: linear-gradient(transparent, #000);\n    padding: 0 8px;\n    position: absolute;\n    bottom: 0px;\n    left: 0px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    transform: translateY(100%);\n    transition: 0.48s transform ease-in-out;\n    z-index: 10;\n    &.is-show {\n      transform: translateY(0);\n    }\n    .toolbar-btn-container {\n      height: 35px;\n      width: 35px;\n      line-height: 1;\n    }\n    .toolbar-btn {\n      color: whitesmoke !important;\n      opacity: 0.8;\n      transition: 0.28s opacity ease-in-out, 0.28s color;\n      &:hover {\n        opacity: 1;\n      }\n      img.icon {\n        object-fit: scale-down;\n        max-width: 100%;\n        max-height: 100%;\n      }\n    }\n    > .toolbar-btn {\n      max-height: 35px;\n      max-width: 35px;\n      font-size: 24px;\n    }\n    .play-btn {\n      transition: 0.28s color;\n      // &:hover {\n      //   color: #409eff !important;\n      // }\n      // color: #f56c6c !important;\n      // &.paused {\n      //   color: #409eff !important;\n      // }\n    }\n    .recording-btn {\n      &.is-recording {\n        color: #f56c6c !important;\n      }\n    }\n    .stop-btn {\n      color: #f56c6c !important;\n    }\n    .progress-bar {\n      flex: 1;\n      padding: 0 10px;\n      .current-time {\n        float: right;\n        cursor: default;\n        color: whitesmoke !important;\n      }\n    }\n  }\n  .overlayers {\n    width: 0;\n    height: 0;\n  }\n}\n\n.jsmpeg-popover {\n  border: none !important;\n  padding: 16px 8px;\n  min-width: 0 !important;\n  background-color: $back-color;\n  .popper__arrow {\n    &::after {\n      border-top-color: $back-color !important;\n      border-radius: 0;\n    }\n  }\n  &.popover-volume {\n    .volume-value {\n      font-size: 12px;\n      text-align: center;\n      color: white;\n    }\n    .el-slider {\n      margin-top: 10px;\n      .el-slider__runway {\n        background: dimgray;\n      }\n      .el-slider__bar {\n        // background: lightgray;\n      }\n      .el-slider__marks-text {\n        color: white !important;\n      }\n    }\n  }\n  &.popover-setting {\n    display: flex;\n    flex-direction: column;\n    padding: 8px 0;\n    .setting-item {\n      color: whitesmoke;\n      cursor: pointer;\n      padding: 8px 15px;\n      // margin: 0 15px;\n      transition: 0.28s color;\n      height: 34px;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n\n      &[highlight]:hover {\n        color: #409eff;\n        // background-color: #409eff;\n      }\n      & + .setting-item {\n        // border-top: 1px solid lightgray;\n      }\n      .label {\n        text-align: right;\n        // flex: 1;\n        width: 80px;\n        // font-weight: 700;\n      }\n      > .input__wrap,\n      > .icon {\n        margin: 0 10px;\n        max-width: 100px;\n      }\n      .input__wrap {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        > * {\n          background-color: transparent;\n          color: whitesmoke;\n        }\n      }\n\n      .el-switch {\n        width: 30px;\n        &.is-checked {\n          .el-switch__core::after {\n            margin-left: -14px !important;\n          }\n        }\n        .el-switch__core {\n          height: 16px;\n          width: 100%;\n          // height: 15px;\n          margin: 0;\n          position: relative;\n          &::after {\n            height: 12px;\n            width: 12px;\n          }\n        }\n      }\n    }\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}