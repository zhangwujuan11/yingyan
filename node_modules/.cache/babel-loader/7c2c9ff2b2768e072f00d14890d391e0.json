{"ast":null,"code":"import axios from 'axios'; // import store from '@/store'\n// import router from '@/router'\n\nvar server = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // baseURL: '/dev-api',\n  withCredentials: false,\n  // 上次设置是true的时候连接不了\n  timeout: 8000\n}); // export default{\n// \tcommon:{\n// \t\tmethod:\"POST\",\n// \t\tdata:{},\n// \t\tparams:{}\n// \t},\n// \t$axios(options={}){\n// \t\toptions.method=options.method ||this.common.method;\n// \t\toptions.data=options.data ||this.common.data;\n// \t\toptions.params=options.params ||this.common.params;\n// \t\t//是否是登录状态\n// \t\t// if( options.headers.token ){\n// \t\t//     options.headers.token = store.state.user.token;\n// \t\t//     if( !options.headers.token ){\n// \t\t//        router.push('/login');\n// \t\t//    }\n// \t\t// }\n// \t\treturn axios(options).then(v=>{\n// \t\t\t// let data=v.data.data\n// \t\t\treturn new Promise((res,rej)=>{\n// \t\t\t\t// 数据不存在返回错误\n// \t\t\t\tif(!v){\n// \t\t\t\t\treturn rej();\n// \t\t\t\t}else{\n// \t\t\t\t\tres(v)\n// \t\t\t\t}\n// \t\t\t})\n// \t\t})\n// \t}\n// }\n\nexport default server;","map":{"version":3,"names":["axios","server","create","baseURL","process","env","VUE_APP_BASE_API","withCredentials","timeout"],"sources":["C:/XM/yingyan/src/common/api/request.js"],"sourcesContent":["import axios from 'axios'\r\n// import store from '@/store'\n// import router from '@/router'\r\nconst server = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // baseURL: '/dev-api',\n  withCredentials: false, // 上次设置是true的时候连接不了\n  timeout: 8000\n})\n\r\n// export default{\r\n// \tcommon:{\r\n// \t\tmethod:\"POST\",\r\n// \t\tdata:{},\r\n// \t\tparams:{}\r\n// \t},\r\n\t\r\n// \t$axios(options={}){\r\n\t\t\r\n// \t\toptions.method=options.method ||this.common.method;\r\n// \t\toptions.data=options.data ||this.common.data;\r\n// \t\toptions.params=options.params ||this.common.params;\r\n\t\t\r\n// \t\t//是否是登录状态\r\n// \t\t// if( options.headers.token ){\r\n// \t\t//     options.headers.token = store.state.user.token;\r\n// \t\t//     if( !options.headers.token ){\r\n// \t\t//        router.push('/login');\r\n// \t\t//    }\r\n// \t\t// }\r\n\t\t\r\n// \t\treturn axios(options).then(v=>{\r\n// \t\t\t// let data=v.data.data\r\n\t\t\t\r\n// \t\t\treturn new Promise((res,rej)=>{\r\n// \t\t\t\t// 数据不存在返回错误\r\n// \t\t\t\tif(!v){\r\n// \t\t\t\t\treturn rej();\r\n// \t\t\t\t}else{\r\n// \t\t\t\t\tres(v)\r\n// \t\t\t\t}\r\n// \t\t\t})\r\n// \t\t})\r\n\t\t\r\n// \t}\r\n\t\r\n// }\r\n\r\nexport default server"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,IAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAa;EAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADK;EAE1B;EACAC,eAAe,EAAE,KAHS;EAGF;EACxBC,OAAO,EAAE;AAJiB,CAAb,CAAf,C,CAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,eAAeP,MAAf"},"metadata":{},"sourceType":"module"}