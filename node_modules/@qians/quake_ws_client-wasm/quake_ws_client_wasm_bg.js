import * as wasm from './quake_ws_client_wasm_bg.wasm';

const lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;

let cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let WASM_VECTOR_LEN = 0;

const lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;

let cachedTextEncoder = new lTextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);

            } else {
                state.a = a;
            }
        }
    };
    real.original = state;

    return real;
}
function __wbg_adapter_16(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h23a8f0aa84ce4370(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_19(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h23a8f0aa84ce4370(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_22(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h23a8f0aa84ce4370(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_25(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h23a8f0aa84ce4370(arg0, arg1, addHeapObject(arg2));
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_exn_store(addHeapObject(e));
    }
}
/**
*/
export class ChatClient {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_chatclient_free(ptr);
    }
    /**
    * @param {string} token
    * @param {string} url
    * @param {string} uuid
    * @param {boolean} release
    */
    static init(token, url, uuid, release) {
        var ptr0 = passStringToWasm0(token, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(uuid, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        wasm.chatclient_init(ptr0, len0, ptr1, len1, ptr2, len2, release);
    }
    /**
    * @param {string} trace
    * @returns {any}
    */
    static local_task(trace) {
        var ptr0 = passStringToWasm0(trace, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_local_task(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} trace
    * @returns {any}
    */
    static system_task(trace) {
        var ptr0 = passStringToWasm0(trace, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_system_task(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} task
    * @returns {any}
    */
    static custom_task(path_code, task) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(task, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_custom_task(ptr0, len0, ptr1, len1);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @returns {any}
    */
    static get_my_role(path_code) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_my_role(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @returns {any}
    */
    static get_users() {
        var ret = wasm.chatclient_get_users();
        return takeObject(ret);
    }
    /**
    * @returns {any}
    */
    static get_groups() {
        var ret = wasm.chatclient_get_groups();
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @returns {any}
    */
    static get_space_base_info(path_code) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_space_base_info(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @returns {any}
    */
    static get_space_name(path_code) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_space_name(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} receiver
    * @param {string} announcement
    * @returns {any}
    */
    static add_announcement(path_code, receiver, announcement) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(announcement, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_add_announcement(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} path_codes
    * @returns {any}
    */
    static get_self_and_children_info(path_codes) {
        var ptr0 = passStringToWasm0(path_codes, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_self_and_children_info(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string | undefined} root_space
    * @returns {any}
    */
    static get_group_chridren(root_space) {
        var ptr0 = isLikeNone(root_space) ? 0 : passStringToWasm0(root_space, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_group_chridren(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} username
    * @returns {any}
    */
    static is_communication_been_established(username) {
        var ptr0 = passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_is_communication_been_established(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path
    * @returns {any}
    */
    static get_group_boots(path) {
        var ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_group_boots(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path
    * @returns {any}
    */
    static get_group_members(path) {
        var ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_group_members(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path
    * @returns {any}
    */
    static get_group_settings(path) {
        var ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_group_settings(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path
    * @param {string | undefined} receiver
    * @returns {any}
    */
    static get_message(path, receiver) {
        var ptr0 = passStringToWasm0(path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(receiver) ? 0 : passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_message(ptr0, len0, ptr1, len1);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} receiver
    * @param {string} typ
    * @param {string} content
    * @returns {any}
    */
    static send_message(path_code, receiver, typ, content) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(typ, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_send_message(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} receiver
    * @param {string} message_id
    * @returns {any}
    */
    static revoke_message(path_code, receiver, message_id) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_revoke_message(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} receiver
    * @param {string} start_message_id
    * @param {number} len
    * @returns {any}
    */
    static load_messages(path_code, receiver, start_message_id, len) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(start_message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_load_messages(ptr0, len0, ptr1, len1, ptr2, len2, len);
        return takeObject(ret);
    }
    /**
    */
    static back() {
        wasm.chatclient_back();
    }
    /**
    * @returns {string}
    */
    static sse_url() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.chatclient_sse_url(retptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * @param {string | undefined} root
    * @returns {any}
    */
    static unread(root) {
        var ptr0 = isLikeNone(root) ? 0 : passStringToWasm0(root, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_unread(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} receiver
    * @returns {any}
    */
    static get_del_messages(path_code, receiver) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_del_messages(ptr0, len0, ptr1, len1);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} receiver
    * @param {string} del_messages
    * @returns {any}
    */
    static delete_messages(path_code, receiver, del_messages) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(del_messages, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_delete_messages(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} sex
    * @param {string} birthday
    * @param {string} region
    * @returns {any}
    */
    static modify_user_info(sex, birthday, region) {
        var ptr0 = passStringToWasm0(sex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(birthday, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(region, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_modify_user_info(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} space_name
    * @param {string} avatar
    * @param {string} parent_code
    * @returns {any}
    */
    static create_space(space_name, avatar, parent_code) {
        var ptr0 = passStringToWasm0(space_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(avatar, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(parent_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_create_space(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} space_name
    * @param {string} avatar
    * @returns {any}
    */
    static modify_space_base_info(path_code, space_name, avatar) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(space_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(avatar, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_modify_space_base_info(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string | undefined} space_nickname
    * @param {boolean} is_space_nickname_on
    * @param {string | undefined} space_remark
    * @param {string | undefined} background_img_url
    * @param {boolean} shield
    * @param {boolean} top_status
    * @returns {any}
    */
    static modify_space_setting(path_code, space_nickname, is_space_nickname_on, space_remark, background_img_url, shield, top_status) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(space_nickname) ? 0 : passStringToWasm0(space_nickname, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(space_remark) ? 0 : passStringToWasm0(space_remark, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = isLikeNone(background_img_url) ? 0 : passStringToWasm0(background_img_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_modify_space_setting(ptr0, len0, ptr1, len1, is_space_nickname_on, ptr2, len2, ptr3, len3, shield, top_status);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} username
    * @returns {any}
    */
    static boot_out_space_member(path_code, username) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_boot_out_space_member(ptr0, len0, ptr1, len1);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @returns {any}
    */
    static withdraw_from_space(path_code) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_withdraw_from_space(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} username
    * @param {number} role
    * @returns {any}
    */
    static set_space_member_auth(path_code, username, role) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_set_space_member_auth(ptr0, len0, ptr1, len1, role);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} invitee
    * @param {string} inviter
    * @returns {any}
    */
    static invite(path_code, invitee, inviter) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(invitee, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(inviter, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_invite(ptr0, len0, ptr1, len1, ptr2, len2);
        return takeObject(ret);
    }
    /**
    * @param {string} invitee
    * @param {string} invitation_link_id
    * @returns {any}
    */
    static link_invite(invitee, invitation_link_id) {
        var ptr0 = passStringToWasm0(invitee, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(invitation_link_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_link_invite(ptr0, len0, ptr1, len1);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @param {string} invitee
    * @param {string} reviewer
    * @param {number} status
    * @returns {any}
    */
    static review(path_code, invitee, reviewer, status) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(invitee, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(reviewer, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_review(ptr0, len0, ptr1, len1, ptr2, len2, status);
        return takeObject(ret);
    }
    /**
    * @param {string} path_code
    * @returns {any}
    */
    static get_invitation_list_to_be_reviewed(path_code) {
        var ptr0 = passStringToWasm0(path_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.chatclient_get_invitation_list_to_be_reviewed(ptr0, len0);
        return takeObject(ret);
    }
}

export function __wbg_now_e6c39c10a5e8aec7() {
    var ret = Date.now();
    return ret;
};

export function __wbg_instanceof_ArrayBuffer_649f53c967aec9b3(arg0) {
    var ret = getObject(arg0) instanceof ArrayBuffer;
    return ret;
};

export function __wbindgen_json_parse(arg0, arg1) {
    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

export function __wbindgen_object_drop_ref(arg0) {
    takeObject(arg0);
};

export function __wbg_log_9d204562d278c8a2(arg0, arg1) {
    console.log(getStringFromWasm0(arg0, arg1));
};

export function __wbg_new_9d38005ad72b669a() { return handleError(function (arg0, arg1) {
    var ret = new WebSocket(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
}, arguments) };

export function __wbindgen_string_new(arg0, arg1) {
    var ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
};

export function __wbg_setbinaryType_ffc26541bf7058b2(arg0, arg1) {
    getObject(arg0).binaryType = takeObject(arg1);
};

export function __wbg_setonmessage_7b6b02a417012ab3(arg0, arg1) {
    getObject(arg0).onmessage = getObject(arg1);
};

export function __wbg_setonclose_bcd7f603edae3db7(arg0, arg1) {
    getObject(arg0).onclose = getObject(arg1);
};

export function __wbg_setonerror_5b2b08538f86d976(arg0, arg1) {
    getObject(arg0).onerror = getObject(arg1);
};

export function __wbg_setonopen_c398a1a152e85bb6(arg0, arg1) {
    getObject(arg0).onopen = getObject(arg1);
};

export function __wbg_send_2bad75269a8cc966() { return handleError(function (arg0, arg1, arg2) {
    getObject(arg0).send(getStringFromWasm0(arg1, arg2));
}, arguments) };

export function __wbg_data_44aaea098b9f4c6b(arg0) {
    var ret = getObject(arg0).data;
    return addHeapObject(ret);
};

export function __wbg_instanceof_Blob_4c6e8fd441ac7315(arg0) {
    var ret = getObject(arg0) instanceof Blob;
    return ret;
};

export function __wbindgen_is_string(arg0) {
    var ret = typeof(getObject(arg0)) === 'string';
    return ret;
};

export function __wbindgen_string_get(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

export function __wbg_code_32a97f32b2304d71(arg0) {
    var ret = getObject(arg0).code;
    return ret;
};

export function __wbg_reason_51cb1f322946c0a8(arg0, arg1) {
    var ret = getObject(arg1).reason;
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

export function __wbg_close_dfed2f697da2eca4() { return handleError(function (arg0) {
    getObject(arg0).close();
}, arguments) };

export function __wbg_message_b7caaf0d160a945c(arg0, arg1) {
    var ret = getObject(arg1).message;
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

export function __wbindgen_debug_string(arg0, arg1) {
    var ret = debugString(getObject(arg1));
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

export function __wbindgen_throw(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

export function __wbindgen_closure_wrapper710(arg0, arg1, arg2) {
    var ret = makeMutClosure(arg0, arg1, 53, __wbg_adapter_16);
    return addHeapObject(ret);
};

export function __wbindgen_closure_wrapper712(arg0, arg1, arg2) {
    var ret = makeMutClosure(arg0, arg1, 53, __wbg_adapter_19);
    return addHeapObject(ret);
};

export function __wbindgen_closure_wrapper714(arg0, arg1, arg2) {
    var ret = makeMutClosure(arg0, arg1, 53, __wbg_adapter_22);
    return addHeapObject(ret);
};

export function __wbindgen_closure_wrapper716(arg0, arg1, arg2) {
    var ret = makeMutClosure(arg0, arg1, 53, __wbg_adapter_25);
    return addHeapObject(ret);
};

