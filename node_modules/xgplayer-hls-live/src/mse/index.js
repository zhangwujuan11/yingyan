import Player from 'xgplayer'
import { EVENTS, Context } from 'xgplayer-helper-utils'
import HlsLiveController from './hls-live';
import defaultConfig from './config';
const HlsAllowedEvents = EVENTS.HlsAllowedEvents;
const REMUX_EVENTS = EVENTS.REMUX_EVENTS;

const util = Player.util

export default class HlsLivePlayer extends Player {
  constructor (options) {
    super(options)
    this.hlsOps = {};
    this.hlsOps = Object.assign(this.hlsOps, defaultConfig)
    util.deepCopy(this.hlsOps, options);
    this._played = false;
    // this.started = false;
  }

  _initEvents () {
    this.__core__.once(REMUX_EVENTS.INIT_SEGMENT, () => {
      const mse = this._context.getInstance('MSE');
      if (!this.started) {
        const live = util.createDom('xg-live', '正在直播', {}, 'xgplayer-live');
        util.addClass(this.root, 'xgplayer-is-live');
        this.controls.appendChild(live);
      }
      this.started = true;
      super.start(mse.url);
    });
  }

  set src (url) {
    this.onWaiting = this.onWaiting.bind(this)
    this.__core__.mse.destroy().then(() => {
      this._context.destroy();
      this._context = null;
      this.started = false;
      this.video.currentTime = 0;

      this.start(url)
    })
  }

  start (url = this.config.url) {
    if (!url || this.started) {
      return;
    }

    if (!this._context) {
      this._context = new Context(this, this.hlsOps, HlsAllowedEvents);
    }

    if (!this.hlsOps) {
      this.hlsOps = {};
      this.hlsOps = Object.assign(this.hlsOps, defaultConfig)
      util.deepCopy(this.hlsOps, this.config);
      this._played = false;
    }

    this.__core__ = this._context.registry('HLS_LIVE_CONTROLLER', HlsLiveController)({player: this, container: this.video, preloadTime: this.config.preloadTime});
    this._context.init();
    this.url = url;
    this.__core__.load(url);
    this._initEvents();
    this.started = true;
  }

  play () {
    if (this._played) {
      this.src = this.config.url;
      this.once('canplay', () => {
        this.video.play();
      })
      return;
    }
    this._played = true;
    super.play();
  }

  destroy () {

    if (this._context) {
      this._context.destroy();
    }
    const prom = new Promise((resolve) => {
      if (this.__core__ && this.__core__.mse) {
        this.__core__.mse.destroy().then(() => {
          setTimeout(() => {
            resolve()
          }, 50)
        })
      } else {
        setTimeout(() => {
          resolve()
        }, 50)
      }
    })
    super.destroy();

    return prom;
  }

  static isSupported () {
    return window.MediaSource &&
      window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
  }

  static install (name, plugin) {
    return Player.install(name, plugin)
  }
}

HlsLivePlayer.install = Player.install.bind(Player)
